datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id             String     @id @default(cuid())
    name           String?
    phone          String?
    email          String?    @unique
    emailVerified  DateTime?  @map("email_verified")
    image          String?
    hashedPassword String?
    accounts       Account[]
    sessions       Session[]
    Payments       Payments[]
    Address        Address[]

    @@map("users")
}

model Payments {
    id     String  @id @default(cuid())
    method String
    price  String?
    userId String  @map("user_id")
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("payments")
}

model Address {
    id                       String  @id @default(cuid())
    country                  String
    name                     String
    city                     String
    state                    String
    phone                    String
    postalCode               String  @map("postal_code")
    companyName              String? @map("company_name")
    streetAddress            String? @map("street_address")
    apartment                String?
    deliveryInstruction      String? @map("delivery_instruction")
    isDefaultShippingAddress Boolean @map("is_default_shipping_address")
    isDefaultBillingAddress  Boolean @map("is_default_billing_address")
    userId                   String  @map("user_id")
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("address")
}

model Orders {
    id          Int         @id @default(autoincrement())
    status      OrderStatus @default(ACTIVE)
    createdAt   DateTime    @default(now())
    orderItemId String      @map("order_item_id")
    items       OrderItem[]

    @@map("orders")
}

model OrderItem {
    id       String  @id @default(cuid())
    title    String
    price    String
    quantity Int
    ordersId Int?
    Orders   Orders? @relation(fields: [ordersId], references: [id])

    @@map("order_item")
}

enum OrderStatus {
    ACTIVE
    CANCELLED
    COMPLETED
}
